const createError = require("http-errors");
const express = require('express');
const app = express();
const path = require("path");
const cookieParser = require("cookie-parser");
const logger = require("morgan");
const cors = require("cors");
//Whenever someone connects this gets executed




require('dotenv').config()
const corsOptions = {
    origin: true, //included origin as true
    credentials: true, //included credentials as true
};
var bodyParser = require('body-parser');
var {initTables} =  require("./db");

initTables();
var indexRouter = require("./routes/index");
var usersRouter = require("./routes/users");
var authRouter = require("./routes/auth");
var tagsRouter = require("./routes/tags");
var redirectRouter = require("./routes/redirect");
var fs = require('fs');
// string generated by canvas.toDataURL()
// strip off the data: url prefix to get just the base64-encoded bytes

app.use(bodyParser.json({limit: '500mb'}));
app.use(bodyParser.urlencoded({ extended: true, limit: '500mb' }));
// view engine setup
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "jade");

app.use(cors(corsOptions));
app.use(logger("dev"));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));
app.use(express.static(path.join(__dirname, "uploads")));

app.use("/", indexRouter);
app.use("/users", usersRouter);
app.use("/auth", authRouter);
app.use("/redirect", redirectRouter);
app.use("/tags", tagsRouter);
app.post('/upload', (req, res) => {
});

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get("env") === "development" ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render("error");
});
// SOCKET



// io.on('connection', (socket) => {
//     console.log('a user connected');
//     addUser(socket);
//     socket.on('disconnect', () => {
//       console.log('user disconnected');
//       delUser(socket)
//     });
//     socket.on('msg', (msg) => {
//         console.log(msg);
//   });
// });
module.exports = app;